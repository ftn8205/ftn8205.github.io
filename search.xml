<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>post</title>
    <url>/2021/11/14/post/</url>
    <content><![CDATA[<h2 id="Golang-筆記"><a href="#Golang-筆記" class="headerlink" title="Golang 筆記"></a>Golang 筆記</h2><h3 id="Benchmark-test"><a href="#Benchmark-test" class="headerlink" title="Benchmark test"></a>Benchmark test</h3><ul>
<li>go test -bench=.</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkRepeat</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		Repeat(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="子測試"><a href="#子測試" class="headerlink" title="子測試"></a>子測試</h3><ul>
<li>Helper function會跟golang説這個函數是輔助函數，如果有報錯，應該要到程式碼中去找</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestHello</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    assertCorrectMessage := <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, got, want <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">        t.Helper()</span><br><span class="line">        <span class="keyword">if</span> got != want &#123;</span><br><span class="line">            t.Errorf(<span class="string">&quot;got &#x27;%q&#x27; want &#x27;%q&#x27;&quot;</span>, got, want)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t.Run(<span class="string">&quot;saying hello to people&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        got := Hello(<span class="string">&quot;Chris&quot;</span>)</span><br><span class="line">        want := <span class="string">&quot;Hello, Chris&quot;</span></span><br><span class="line">        assertCorrectMessage(t, got, want)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    t.Run(<span class="string">&quot;empty string defaults to &#x27;world&#x27;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        got := Hello(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        want := <span class="string">&quot;Hello, World&quot;</span></span><br><span class="line">        assertCorrectMessage(t, got, want)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="table-driven-test"><a href="#table-driven-test" class="headerlink" title="table-driven test"></a>table-driven test</h3><ul>
<li>Create the expected results and input values in a map.</li>
<li>t.Run all the cases in the map and assert/require the returned values with expected values.</li>
<li>測試一個接口的不同實現(測試Shape的area，shape包含circle, triangle…)，或者是傳入函數的資料有很多種不同的測試需求</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsStrExist</span><span class="params">(slice []<span class="keyword">string</span>, find <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">		<span class="keyword">if</span> v == find &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// non-table driven method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIsStrExistSimple</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	</span><br><span class="line">	ok := IsStrExist([]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">	require.True(t, ok)</span><br><span class="line">	</span><br><span class="line">	ok = IsStrExist([]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">	require.False(t, ok)</span><br><span class="line">	</span><br><span class="line">	ok = IsStrExist([]<span class="keyword">string</span>&#123;&#125;, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">	require.False(t, ok)</span><br><span class="line">	</span><br><span class="line">	ok = IsStrExist(<span class="literal">nil</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">	require.False(t, ok)</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// table driven method</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestIsStrExist</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">	</span><br><span class="line">	tests := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span> &#123;</span><br><span class="line">		slice []<span class="keyword">string</span></span><br><span class="line">		find  <span class="keyword">string</span></span><br><span class="line">		want  <span class="keyword">bool</span></span><br><span class="line">	</span><br><span class="line">	&#125;&#123;</span><br><span class="line">		<span class="string">&quot;find&quot;</span>:    &#123;[]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>&#125;,</span><br><span class="line">		<span class="string">&quot;notfind&quot;</span>: &#123;[]<span class="keyword">string</span>&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;, <span class="string">&quot;c&quot;</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">		<span class="string">&quot;empty&quot;</span>:   &#123;[]<span class="keyword">string</span>&#123;&#125;, <span class="string">&quot;a&quot;</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">		<span class="string">&quot;nil&quot;</span>:     &#123;<span class="literal">nil</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">false</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> name, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">		t.Run(name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">        	got := IsStrExist(tt.slice, tt.find)</span><br><span class="line">			require.EqualValues(t, tt.want, got)</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Testify"><a href="#Testify" class="headerlink" title="Testify"></a>Testify</h3><ul>
<li>assert  (“github.com/stretchr/testify/assert”) 失敗時，會繼續進行</li>
<li>require (“github.com/stretchr/testify/require”) 失敗時，會直接終止程式</li>
<li>mock (“github.com/stretchr/testify/mock”) 用來mock</li>
</ul>
<p>Testify framework 提供了suite，可以讓我們在每個測試前後做一些事情，例如初始化資料庫，清空資料庫等等操作。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ExampleTestSuite <span class="keyword">struct</span> &#123;</span><br><span class="line">  suite.Suite</span><br><span class="line">  Variable <span class="keyword">int</span> <span class="comment">// 還可以需告全域變數</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每個測試前會調用這個function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(suite *ExampleTestSuite)</span> <span class="title">SetupTest</span><span class="params">()</span></span> &#123;</span><br><span class="line">  suite.Variable = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// test case</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(suite *ExampleTestSuite)</span> <span class="title">TestExample</span><span class="params">()</span></span> &#123;</span><br><span class="line">  assert.Equal(sutie.T(), <span class="number">5</span>, suite.Variable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 讓go test跑這些Suite</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestExampleTestSuite</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">  suite.Run(t, <span class="built_in">new</span>(exampleTestSuite))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每個測試執行後都會呼叫這個function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(suite *ExampleTestSuite)</span> <span class="title">TearDownTest</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="go-test-指令"><a href="#go-test-指令" class="headerlink" title="go test 指令"></a>go test 指令</h3><p>go test -v wechat_test.go wechat.go 跑某一個測試的檔案，要把原檔案也寫進去</p>
<p>go test -v  跑這個資料夾中所有測試的檔案裡的所有測試</p>
<p>go test -run TestSuiteDaasClientImpl/Test_GetProject_Fail -v  單跑一個測試</p>
<p>go test -run Test_SetUpMetaConfig/Test_SetUpMetaConfig_Success/Success -v 跑一個測試中的子測試 (Success)</p>
<h3 id="goMock-套件"><a href="#goMock-套件" class="headerlink" title="goMock 套件"></a>goMock 套件</h3><p>GoMock是由Golang官方開發維護的測試框架，實現了較為完整的基於interface的Mock功能，能夠與Golang內建的testing包良好整合，也能用於其它的測試環境中</p>
<p>GoMock測試框架包含了GoMock包和mockgen工具兩部分，其中GoMock包完成對樁物件生命週期的管理，mockgen工具用來生成interface對應的Mock類原始檔，如果檔案中沒有interface，那產出來的Mock檔就會是空的。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://goinbigdata.com/testing-go-code-with-testify/">https://goinbigdata.com/testing-go-code-with-testify/</a></p>
<p><a href="https://hackmd.io/5FTTkQb_QCOz6j43Moimuw?view#go-mock-usage">https://hackmd.io/5FTTkQb_QCOz6j43Moimuw?view#go-mock-usage</a></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/11/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 筆記</title>
    <url>/2022/05/09/linux-%E7%AD%86%E8%A8%98/</url>
    <content><![CDATA[<p>linux目錄結構</p>
<p>linux是什麼? 跟 ubuntu這些的差別</p>
<h2 id="第二章-系統操作篇"><a href="#第二章-系統操作篇" class="headerlink" title="第二章 系統操作篇"></a>第二章 系統操作篇</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul>
<li>-l 詳細列出所有文件的訊息</li>
<li>-r 照檔名倒序排列</li>
<li>-t 照時間順序排序</li>
<li>-a 顯示隱藏文件與一般文件</li>
<li>-R 把文件夾內的資料也都顯示出來</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># d 表示資料夾， - 表示一般文件</span></span><br><span class="line"><span class="comment"># 後面九個字代表權限</span></span><br><span class="line"></span><br><span class="line">drwxr-xr-x  38 ianke  staff   1216  4 25 15:32 Moment</span><br><span class="line">-rw-r--r--   1 ianke  staff   3313  4 18 11:57 Mutli-view design</span><br></pre></td></tr></table></figure>

<h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><ul>
<li>cd /path/to/… 絕對路徑</li>
<li>cd ./path/to/… 相對路徑</li>
<li>cd ../path/to/.. 相對路徑</li>
</ul>
<h3 id="文件夾新增刪除"><a href="#文件夾新增刪除" class="headerlink" title="文件夾新增刪除"></a>文件夾新增刪除</h3><ul>
<li>mkdir 新增新目錄</li>
<li>rmdir 刪除空目錄</li>
<li>rm -r 刪除非空目錄</li>
</ul>
<h3 id="cp-mv"><a href="#cp-mv" class="headerlink" title="cp, mv"></a>cp, mv</h3><ul>
<li>cp 原文件位置 新文件位置   (複製原文件到其他位置</li>
<li>mv 原檔名 新檔名 (更改檔名</li>
<li>mv 原文件 新位置 (移動檔案到新位置</li>
</ul>
<h3 id="文本查看命令"><a href="#文本查看命令" class="headerlink" title="文本查看命令"></a>文本查看命令</h3><ul>
<li>cat 文本內容顯示到終端</li>
<li>head 查看文件開頭前10行</li>
<li>tail 查看文件結尾10行 (可用 -f 當文件更新時，同步顯示更新)</li>
<li>wc 統計文件內容訊息</li>
</ul>
<h3 id="打包壓縮文件"><a href="#打包壓縮文件" class="headerlink" title="打包壓縮文件"></a>打包壓縮文件</h3><ul>
<li>tar cf 打包後的文件  要打包的文件  [ tar cf ./abc.tar upppppp]</li>
<li>tar czf  打包後的文件  要打包的文件 (打包並壓縮)</li>
<li>c 打包</li>
<li>x 解包</li>
<li>f 指定操作類型為文件</li>
</ul>
<h3 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h3><ul>
<li>g 到第一行</li>
<li>G 到最後一行</li>
<li>dd 刪除該行</li>
<li>u 復原</li>
<li>shift 6 到某行的開頭</li>
<li>shift 4 到某行的結尾</li>
<li>:wq 儲存並離開</li>
<li>:! 執行linux指令 (:! ls)</li>
<li>/字符名稱 查找某個字符，按n可以跳到下一個匹配的地方, shift n 跳到上一個匹配的地方</li>
<li>:set nu 顯示行號</li>
<li>:set nonu 拿掉行號</li>
</ul>
<h3 id="用戶與權限管理"><a href="#用戶與權限管理" class="headerlink" title="用戶與權限管理"></a>用戶與權限管理</h3><ul>
<li>useradd 新建用戶</li>
<li>userdel 刪除用戶</li>
<li>passwd 修改用戶密碼</li>
<li>usermod 修改用戶屬性</li>
<li>chage 修改用戶屬性</li>
<li>su - user1  臨時切換成user1的角色</li>
<li>sudo 以其他角色身份執行命令 (要先用root權限，在visudo中設定，允許讓某個角色做這什麼事情)</li>
</ul>
<p>/etc/passwd </p>
<p>第一個字: 用戶名</p>
<p>第二個字: 是否需要密碼驗證 (x: 不用密碼)</p>
<p>第三個字: 用戶ID</p>
<p>第四個字: groupID</p>
<p>第五個字: 家目錄的位置</p>
<p>第六個字: 所使用的命令解釋器</p>
<p>/etc/shadow</p>
<p>第一個字: 用戶名</p>
<p>第二個字: 用戶加密後的密碼</p>
<p>/etc/group </p>
<p>第一個字 組名</p>
<p>第二個字: 組密碼</p>
<p>第三個字: 組ID</p>
<h3 id="文件與目錄權限"><a href="#文件與目錄權限" class="headerlink" title="文件與目錄權限"></a>文件與目錄權限</h3><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/2c321c40-c737-43cb-9044-0acaba7d5e68/Untitled.png" alt="Untitled"></p>
<p>b: 硬碟</p>
<p>c: 終端 </p>
<p>文件權限</p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a38fccaa-afc5-4703-af50-91445ba9c6ad/Untitled.png" alt="Untitled"></p>
<p>目錄權限</p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/10476fcf-57e6-44ae-b46a-d5333a7036ac/Untitled.png" alt="Untitled"></p>
<p>修改權限命令</p>
<p>原本 /test屬於root </p>
<p>chown user1 /test </p>
<p>/test 就變成屬於 user1</p>
<p>特殊權限</p>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/365bac94-4b5a-4f0b-bfb9-3b94aa77ee6c/Untitled.png" alt="Untitled"></p>
]]></content>
      <categories>
        <category>技術學習</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
